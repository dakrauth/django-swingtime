# Generated by Django 5.1.6 on 2025-03-23 14:58
import sys
from datetime import datetime, time, timedelta
from dateutil import rrule
from django.db import migrations


def load_demo(apps, schema_editor):
    # Create the studio's event types
    from swingtime.conf import swingtime_settings
    from swingtime.base_models import normalize_tz
    from django.contrib.auth.models import User

    EventType = apps.get_model("karate", "EventType")
    Event = apps.get_model("karate", "Event")
    Occurrence = apps.get_model("karate", "Occurrence")

    def add_occurrences(event, start_time, end_time, **rrule_params):
        start_time = normalize_tz(start_time)
        end_time = normalize_tz(end_time)
        count = rrule_params.get("count")
        until = rrule_params.get("until")
        if until:
            until = rrule_params["until"] = normalize_tz(rrule_params.get("until"))

        if not (count or until):
            Occurrence.objects.create(event=event, start_time=start_time, end_time=end_time)
            return

        rrule_params.setdefault("freq", rrule.DAILY)
        delta = end_time - start_time
        Occurrence.objects.bulk_create(
            [
                Occurrence(event=event, start_time=ev, end_time=ev + delta)
                for ev in rrule.rrule(dtstart=start_time, **rrule_params)
            ]
        )

    def create_event(title, et, descr, start, end=None, **rrule_params):
        event = Event.objects.create(title=title, description=descr, event_type=et)
        end = end or (start + swingtime_settings.DEFAULT_OCCURRENCE_DURATION)
        add_occurrences(event, start, end, **rrule_params)
        print(f'Created event "{title}" with {event.occurrence_set.count()} occurrences')
        return event

    User.objects.create_superuser("admin", "admin@example.com", "password")

    ets = {
        et.abbr: et
        for et in EventType.objects.bulk_create(
            [
                EventType(abbr="prv", label="Private Lesson"),
                EventType(abbr="bgn", label="Beginner Class"),
                EventType(abbr="adv", label="Advanced Class"),
                EventType(abbr="bbc", label="Black Belt Class"),
                EventType(abbr="spr", label="Sparring"),
                EventType(abbr="open", label="Open Dojo"),
                EventType(abbr="spc", label="Special Event"),
            ]
        )
    }
    types = ", ".join([f"{et.label}" for et in ets.values()])
    print(f"\nCreated event types: {types}")

    now = datetime.now()
    # create a single occurrence event
    evt = create_event(
        "Grand Opening",
        ets["spc"],
        "Open house",
        start=datetime.combine(now.date(), time(16)),
        end=datetime.combine(now.date(), time(18)),
    )
    print(f'Created event "{evt}" with {evt.occurrence_set.count()} occurrences')

    # create an event with multiple occurrences by fixed count
    evt = create_event(
        "Beginner Class",
        ets["bgn"],
        "Open to all white and yellow belts",
        start=datetime.combine(now.date(), time(19)),
        count=30,
        byweekday=(rrule.MO, rrule.WE, rrule.FR),
    )
    print(f'Created event "{evt}" with {evt.occurrence_set.count()} occurrences')

    # create an event with multiple occurrences by ending date (until)
    evt = create_event(
        "Advance Class",
        ets["adv"],
        "Open to all green and brown belts",
        start=datetime.combine(now.date(), time(18)),
        until=now + timedelta(days=+70),
        byweekday=(rrule.MO, rrule.WE, rrule.FR),
    )
    print(f'Created event "{evt}" with {evt.occurrence_set.count()} occurrences')

    # create an event with multiple occurrences by fixed count on monthly basis
    evt = create_event(
        "Black Belt Class",
        ets["bbc"],
        "Open to all black belts",
        start=datetime.combine(now.date(), time(18, 30)),
        end=datetime.combine(now.date(), time(20, 30)),
        count=6,
        freq=rrule.MONTHLY,
        byweekday=(rrule.TH(+1), rrule.TH(+3)),
    )
    print(f'Created event "{evt}" with {evt.occurrence_set.count()} occurrences')

    # create an event with multiple occurrences and alternate intervale
    evt = create_event(
        "Open Dojo",
        ets["open"],
        "Open to all students",
        start=datetime.combine(now.date(), time(12)),
        end=datetime.combine(now.date(), time(16)),
        interval=2,
        count=6,
        byweekday=(rrule.SU,),
    )


class Migration(migrations.Migration):
    dependencies = [
        ("karate", "0001_initial"),
    ]

    operations = [migrations.RunPython(load_demo)] if "pytest" not in sys.argv else []
