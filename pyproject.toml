[build-system]
requires = ["setuptools>=61.0.0"]
build-backend = "setuptools.build_meta"

[project]
name = "django-swingtime"
dynamic = ["version"]
description = "A Django calendaring application"
license = { file = "LICENSE" }
keywords = ["django", "calendar", "events"]
readme = { file = "README.rst", content-type = "text/x-rst" }
authors = [
    { name = "David A Krauth", email = "dakrauth@gmail.com" },
]
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Web Environment",
    "Framework :: Django",
    "Framework :: Django :: 4.2",
    "Framework :: Django :: 5.0",
    "Framework :: Django :: 5.1",
    "Framework :: Django :: 5.2",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Office/Business :: Scheduling",
]

dependencies = [
    "Django>=4.2,<6.0",
    "python-dateutil>=2.8.2"
]

[project.urls]
Homepage = "https://github.com/dakrauth/django-swingtime"

[project.optional-dependencies]
test = [
    "tox",
    "coverage",
    "pytest-django",
    "pytest",
    "pytest-cov",
    "flake8"
]
docs = [ "sphinx", "sphinx-rtd-theme" ]
dev = [ "ruff", "build", "twine" ]

[tool.setuptools.dynamic]
version = { attr = "swingtime.__init__.__version__"}

[tool.setuptools]
packages = ["swingtime"]

[tool.ruff]
cache-dir = "temp/ruff"
line-length = 100
indent-width = 4

[tool.pytest.ini_options]
minversion = "6.0"
testpaths = [ "tests", ]

DJANGO_SETTINGS_MODULE = "demo.settings"
django_find_project = false
addopts = "-rf"

[tool.coverage.run]
branch = true
source = [ "swingtime" ]
omit = [ "**/migrations/**" ]

[tool.coverage.html]
directory = "build/coverage"
title = "Swingtime Coverage report"

[tool.coverage.report]
ignore_errors = true

# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if __name__ == .__main__.:"
]
